-- Generated by CSharp.lua Compiler 1.1.0
local System = System
System.namespace("Roslyn.Utilities", function (namespace) 
  -- <summary>
  -- Implements a few file name utilities that are needed by the compiler.
  -- In general the compiler is not supposed to understand the format of the paths.
  -- In rare cases it needs to check if a string is a valid file name or change the extension
  -- (embedded resources, netmodules, output name).
  -- The APIs are intentionally limited to cover just these rare cases. Do not add more APIs.
  -- </summary>
  namespace.class("FileNameUtilities", function (namespace) 
    local GetExtension, IndexOfExtension, GetFileName, IndexOfFileName, RemoveExtension
    -- <summary>
    -- Returns an extension of the specified path string.
    -- </summary>
    -- <remarks>
    -- The same functionality as <see cref="System.IO.Path.GetExtension(string)"/> but doesn't throw an exception
    -- if there are invalid characters in the path.
    -- </remarks>
    GetExtension = function (path) 
      if path == nil then
        return nil
      end

      local index = IndexOfExtension(path)
      local default
      if (index >= 0) then
        default = path:Substring(index)
      else
        default = ""
      end
      return default
    end
    -- <summary>
    -- Returns the offset in <paramref name="path"/> where the dot that starts an extension is, or -1 if the path doesn't have an extension.
    -- </summary>
    -- <remarks>
    -- Returns 0 for path ".goo".
    -- Returns -1 for path "goo.".
    -- </remarks>
    IndexOfExtension = function (path) 
      if path == nil then
        return - 1
      end

      local length = #path
      local i = length

      i = i - 1
      while i >= 0 do
        local c = path:get(i)
        if c == 46 --[['.']] then
          if i ~= length - 1 then
            return i
          end

          return - 1
        end

        if c == 92 --[['\\']] or c == 47 --[['/']] or c == 58 --[[':']] then
          break
        end
      end

      return - 1
    end
    -- <summary>
    -- Get file name from path.
    -- </summary>
    -- <remarks>Unlike <see cref="System.IO.Path.GetFileName"/> doesn't check for invalid path characters.</remarks>
    GetFileName = function (path, includeExtension) 
      local fileNameStart = IndexOfFileName(path)
      local default
      if (fileNameStart <= 0) then
        default = path
      else
        default = path:Substring(fileNameStart)
      end
      local fileName = default
      local extern
      if includeExtension then
        extern = fileName
      else
        extern = RemoveExtension(fileName)
      end
      return extern
    end
    -- <summary>
    -- Returns the position in given path where the file name starts.
    -- </summary>
    -- <returns>-1 if path is null.</returns>
    IndexOfFileName = function (path) 
      if path == nil then
        return - 1
      end

      for i = #path - 1, 0, - 1 do
        local ch = path:get(i)
        if ch == 92 --[['\\']] or ch == 47 --[['/']] or ch == 58 --[[':']] then
          return i + 1
        end
      end

      return 0
    end
    -- <summary>
    -- Removes extension from path.
    -- </summary>
    -- <remarks>
    -- Returns "goo" for path "goo.".
    -- Returns "goo.." for path "goo...".
    -- </remarks>
    RemoveExtension = function (path) 
      if path == nil then
        return nil
      end

      local index = IndexOfExtension(path)
      if index >= 0 then
        return path:Substring(0, index)
      end

      -- trim last ".", if present
      if #path > 0 and path:get(#path - 1) == 46 --[['.']] then
        return path:Substring(0, #path - 1)
      end

      return path
    end
    return {
      GetExtension = GetExtension, 
      GetFileName = GetFileName, 
      IndexOfFileName = IndexOfFileName
    }
  end)
end)
