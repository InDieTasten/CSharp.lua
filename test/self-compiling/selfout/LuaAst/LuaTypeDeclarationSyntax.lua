-- Generated by CSharp.lua Compiler 1.1.0
--[[
Copyright 2017 YANG Huan (sy.yanghuan@gmail.com).

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
]]
local System = System
local Linq = System.Linq.Enumerable
local CSharpLua
local CSharpLuaLuaAst
System.usingDeclare(function (global) 
  CSharpLua = global.CSharpLua
  CSharpLuaLuaAst = CSharpLua.LuaAst
end)
System.namespace("CSharpLua.LuaAst", function (namespace) 
  namespace.class("LuaSpeaicalGenericType", function (namespace) 
    return {
      IsLazy = false
    }
  end)

  namespace.class("LuaTypeDeclarationSyntax", function (namespace) 
    local AddStaticReadOnlyAssignmentName, AddDocumentComments, AddClassAttributes, AddMethodAttributes, AddFieldAttributes, AddTypeParameters, AddBaseTypes, AddResultTable, 
    AddResultTable1, AddMethod, AddInitFiled, AddField, AddPropertyOrEvent, AddProperty, AddEvent, SetStaticCtor, 
    SetStaticCtorEmpty, getIsNoneCtros, getIsInitStatementExists, AddCtor, AddInitFunction, AddStaticAssignmentNames, CheckStaticCtorFunction, GetInitFunction, 
    CheckCtorsFunction, CheckAttributes, AddAllStatementsTo, Render, __init__, __ctor__
    __init__ = function (this) 
      this._local = CSharpLuaLuaAst.LuaLocalAreaSyntax()
      this._methodList = CSharpLuaLuaAst.LuaStatementListSyntax()
      this._resultTable = CSharpLuaLuaAst.LuaTableInitializerExpression()
      this._staticLazyStatements = System.List(CSharpLuaLuaAst.LuaStatementSyntax)()
      this._staticInitStatements = System.List(CSharpLuaLuaAst.LuaStatementSyntax)()
      this._statisConstructorStatements = System.List(CSharpLuaLuaAst.LuaStatementSyntax)()
      this._staticAssignmentStatements = System.List(CSharpLuaLuaAst.LuaIdentifierNameSyntax)()
      this._initStatements = System.List(CSharpLuaLuaAst.LuaStatementSyntax)()
      this._constructors = System.List(CSharpLuaLuaAst.LuaConstructorAdapterExpressionSyntax)()
      this._typeParameters = System.List(CSharpLuaLuaAst.LuaParameterSyntax)()
      this._attributes = CSharpLuaLuaAst.LuaTableInitializerExpression()
      this._documentComments = System.List(CSharpLuaLuaAst.LuaStatementSyntax)()
    end
    __ctor__ = function (this) 
      __init__(this)
      CSharpLuaLuaAst.LuaWrapFunctionStatementSynatx.__ctor__(this)
    end
    AddStaticReadOnlyAssignmentName = function (this, name) 
      if not this._staticAssignmentStatements:Contains(name) then
        this._staticAssignmentStatements:Add(name)
      end
    end
    AddDocumentComments = function (this, commets) 
      this._documentComments:AddRange(commets)
    end
    AddClassAttributes = function (this, attributes) 
      AddFieldAttributes(this, CSharpLuaLuaAst.LuaIdentifierNameSyntax.Class, attributes)
    end
    AddMethodAttributes = function (this, name, attributes) 
      AddFieldAttributes(this, name, attributes)
    end
    AddFieldAttributes = function (this, name, attributes) 
      if #attributes > 0 then
        local table = CSharpLuaLuaAst.LuaTableInitializerExpression()
        table.Items:AddRange(Linq.Select(attributes, function (i) 
          return CSharpLuaLuaAst.LuaSingleTableItemSyntax(i)
        end, CSharpLuaLuaAst.LuaSingleTableItemSyntax))
        local key = CSharpLuaLuaAst.LuaTableLiteralKeySyntax(name)
        local item = CSharpLuaLuaAst.LuaKeyValueTableItemSyntax(key, table)
        this._attributes.Items:Add(item)
      end
    end
    AddTypeParameters = function (this, typeParameters) 
      this._typeParameters:AddRange(typeParameters)
    end
    AddBaseTypes = function (this, baseTypes, genericArgument) 
      local hasLazyGenericArgument = false
      if genericArgument ~= nil then
        if genericArgument.IsLazy then
          hasLazyGenericArgument = true
        else
          AddResultTable1(this, genericArgument.Name, genericArgument.Value)
        end
      end

      local global = CSharpLuaLuaAst.LuaIdentifierNameSyntax.Global
      local table = CSharpLuaLuaAst.LuaTableInitializerExpression()
      for _, baseType in System.each(baseTypes) do
        local memberAccess = CSharpLuaLuaAst.LuaMemberAccessExpressionSyntax(global, baseType, false)
        table.Items:Add(CSharpLuaLuaAst.LuaSingleTableItemSyntax(memberAccess))
      end
      local functionExpression = CSharpLuaLuaAst.LuaFunctionExpressionSyntax()
      functionExpression:AddParameter1(global)
      if hasLazyGenericArgument then
        functionExpression:AddParameter1(CSharpLuaLuaAst.LuaIdentifierNameSyntax.This)
        local assignment = CSharpLuaLuaAst.LuaAssignmentExpressionSyntax(CSharpLuaLuaAst.LuaMemberAccessExpressionSyntax(CSharpLuaLuaAst.LuaIdentifierNameSyntax.This, genericArgument.Name, false), genericArgument.Value)
        functionExpression:AddStatement1(assignment)
      end
      functionExpression:AddStatement(CSharpLuaLuaAst.LuaReturnStatementSyntax(table))
      AddResultTable1(this, CSharpLuaLuaAst.LuaIdentifierNameSyntax.Inherits, functionExpression)
    end
    AddResultTable = function (this, name) 
      local item = CSharpLuaLuaAst.LuaKeyValueTableItemSyntax(CSharpLuaLuaAst.LuaTableLiteralKeySyntax(name), name)
      this._resultTable.Items:Add(item)
    end
    AddResultTable1 = function (this, name, value) 
      local item = CSharpLuaLuaAst.LuaKeyValueTableItemSyntax(CSharpLuaLuaAst.LuaTableLiteralKeySyntax(name), value)
      this._resultTable.Items:Add(item)
    end
    AddMethod = function (this, name, method, isPrivate, isStaticLazy, documentationComments) 
      this._local.Variables:Add(name)
      local assignment = CSharpLuaLuaAst.LuaAssignmentExpressionSyntax(name, method)
      if documentationComments ~= nil and #documentationComments > 0 then
        local statementList = CSharpLuaLuaAst.LuaStatementListSyntax()
        statementList.Statements:AddRange(documentationComments)
        this._methodList.Statements:Add(statementList)
      end
      this._methodList.Statements:Add(CSharpLuaLuaAst.LuaExpressionStatementSyntax(assignment))
      if not isPrivate then
        if isStaticLazy then
          local thisAssignment = CSharpLuaLuaAst.LuaAssignmentExpressionSyntax(CSharpLuaLuaAst.LuaMemberAccessExpressionSyntax(CSharpLuaLuaAst.LuaIdentifierNameSyntax.This, name, false), name)
          this._staticLazyStatements:Add(CSharpLuaLuaAst.LuaExpressionStatementSyntax(thisAssignment))
        else
          AddResultTable(this, name)
        end
      end
    end
    AddInitFiled = function (this, name, value) 
      local memberAccess = CSharpLuaLuaAst.LuaMemberAccessExpressionSyntax(CSharpLuaLuaAst.LuaIdentifierNameSyntax.This, name, false)
      local assignment = CSharpLuaLuaAst.LuaAssignmentExpressionSyntax(memberAccess, value)
      this._initStatements:Add(CSharpLuaLuaAst.LuaExpressionStatementSyntax(assignment))
    end
    AddField = function (this, name, value, isImmutable, isStatic, isPrivate, isReadOnly) 
      if isStatic then
        if isPrivate then
          this._local.Variables:Add(name)
          if value ~= nil then
            local assignment = CSharpLuaLuaAst.LuaAssignmentExpressionSyntax(name, value)
            if isImmutable then
              this._methodList.Statements:Add(CSharpLuaLuaAst.LuaExpressionStatementSyntax(assignment))
            else
              this._staticInitStatements:Add(CSharpLuaLuaAst.LuaExpressionStatementSyntax(assignment))
            end
          end
        else
          if isReadOnly then
            this._local.Variables:Add(name)
            if value ~= nil then
              local assignment = CSharpLuaLuaAst.LuaAssignmentExpressionSyntax(name, value)
              this._staticInitStatements:Add(CSharpLuaLuaAst.LuaExpressionStatementSyntax(assignment))
              this._staticAssignmentStatements:Add(name)
            end
          else
            if value ~= nil then
              local assignment = CSharpLuaLuaAst.LuaAssignmentExpressionSyntax(CSharpLuaLuaAst.LuaMemberAccessExpressionSyntax(CSharpLuaLuaAst.LuaIdentifierNameSyntax.This, name, false), value)
              this._staticInitStatements:Add(CSharpLuaLuaAst.LuaExpressionStatementSyntax(assignment))
            end
          end
        end
      else
        if value ~= nil then
          if isImmutable then
            AddResultTable1(this, name, value)
          else
            AddInitFiled(this, name, value)
          end
        end
      end
    end
    AddPropertyOrEvent = function (this, isProperty, name, innerName, value, isImmutable, isStatic, isPrivate) 
      local initMethodIdentifier
      local get, set
      if isProperty then
        initMethodIdentifier = CSharpLuaLuaAst.LuaIdentifierNameSyntax.Property
        get = CSharpLuaLuaAst.LuaPropertyOrEventIdentifierNameSyntax:new(2, true, true, name)
        set = CSharpLuaLuaAst.LuaPropertyOrEventIdentifierNameSyntax:new(2, true, false, name)
      else
        initMethodIdentifier = CSharpLuaLuaAst.LuaIdentifierNameSyntax.Event
        get = CSharpLuaLuaAst.LuaPropertyOrEventIdentifierNameSyntax:new(2, false, true, name)
        set = CSharpLuaLuaAst.LuaPropertyOrEventIdentifierNameSyntax:new(2, false, false, name)
      end

      this._local.Variables:Add(get)
      this._local.Variables:Add(set)
      local assignment = CSharpLuaLuaAst.LuaMultipleAssignmentExpressionSyntax()
      assignment.Lefts:Add(get)
      assignment.Lefts:Add(set)
      local invocation = CSharpLuaLuaAst.LuaInvocationExpressionSyntax:new(1, initMethodIdentifier)
      invocation:AddArgument(CSharpLuaLuaAst.LuaStringLiteralExpressionSyntax(innerName))
      assignment.Rights:Add(invocation)
      this._methodList.Statements:Add(CSharpLuaLuaAst.LuaExpressionStatementSyntax(assignment))

      if value ~= nil then
        if isStatic then
          if isImmutable then
            AddResultTable1(this, name, value)
          else
            local thisAssignment = CSharpLuaLuaAst.LuaAssignmentExpressionSyntax(name, value)
            this._staticLazyStatements:Add(CSharpLuaLuaAst.LuaExpressionStatementSyntax(thisAssignment))
          end
        else
          if isImmutable then
            AddResultTable1(this, name, value)
          else
            AddInitFiled(this, name, value)
          end
        end
      end

      if not isPrivate then
        AddResultTable(this, get)
        AddResultTable(this, set)
      end
    end
    AddProperty = function (this, name, innerName, value, isImmutable, isStatic, isPrivate) 
      AddPropertyOrEvent(this, true, name, innerName, value, isImmutable, isStatic, isPrivate)
    end
    AddEvent = function (this, name, innerName, value, isImmutable, isStatic, isPrivate) 
      AddPropertyOrEvent(this, false, name, innerName, value, isImmutable, isStatic, isPrivate)
    end
    SetStaticCtor = function (this, function_) 
      assert(#this._statisConstructorStatements == 0)
      this._statisConstructorStatements:AddRange(function_.Body.Statements)
    end
    SetStaticCtorEmpty = function (this) 
      assert(#this._statisConstructorStatements == 0)
      this._statisConstructorStatements:Add(CSharpLuaLuaAst.LuaStatementSyntax.Empty)
    end
    getIsNoneCtros = function (this) 
      return #this._constructors == 0
    end
    getIsInitStatementExists = function (this) 
      return #this._initStatements > 0
    end
    AddCtor = function (this, function_, isZeroParameters) 
      if isZeroParameters then
        this._constructors:Insert(0, function_)
      else
        this._constructors:Add(function_)
      end
    end
    AddInitFunction = function (this, body, name, initFunction, isAddItem) 
      this._local.Variables:Add(name)
      body.Statements:Add(CSharpLuaLuaAst.LuaExpressionStatementSyntax(CSharpLuaLuaAst.LuaAssignmentExpressionSyntax(name, initFunction)))
      if isAddItem then
        AddResultTable(this, name)
      end
    end
    AddStaticAssignmentNames = function (this, body) 
      if #this._staticAssignmentStatements > 0 then
        local assignment = CSharpLuaLuaAst.LuaMultipleAssignmentExpressionSyntax()
        for _, identifierName in System.each(this._staticAssignmentStatements) do
          local memberAccess = CSharpLuaLuaAst.LuaMemberAccessExpressionSyntax(CSharpLuaLuaAst.LuaIdentifierNameSyntax.This, identifierName, false)
          assignment.Lefts:Add(memberAccess)
          assignment.Rights:Add(identifierName)
        end
        body.Statements:Add(CSharpLuaLuaAst.LuaExpressionStatementSyntax(assignment))
      end
    end
    CheckStaticCtorFunction = function (this, body) 
      local statements = System.List(CSharpLuaLuaAst.LuaStatementSyntax)()
      statements:AddRange(this._staticLazyStatements)
      statements:AddRange(this._staticInitStatements)
      statements:AddRange(this._statisConstructorStatements)
      if #statements > 0 then
        local staticCtor = CSharpLuaLuaAst.LuaFunctionExpressionSyntax()
        staticCtor:AddParameter1(CSharpLuaLuaAst.LuaIdentifierNameSyntax.This)
        staticCtor.Body.Statements:AddRange(statements)
        AddStaticAssignmentNames(this, staticCtor.Body)
        AddInitFunction(this, body, CSharpLuaLuaAst.LuaIdentifierNameSyntax.StaticCtor, staticCtor, true)
      end
    end
    GetInitFunction = function (this) 
      local initFuntion = CSharpLuaLuaAst.LuaFunctionExpressionSyntax()
      initFuntion:AddParameter1(CSharpLuaLuaAst.LuaIdentifierNameSyntax.This)
      initFuntion.Body.Statements:AddRange(this._initStatements)
      return initFuntion
    end
    CheckCtorsFunction = function (this, body) 
      local hasInit = #this._initStatements > 0
      local hasCtors = #this._constructors > 0

      if hasCtors then
        if hasInit then
          local initIdentifier = CSharpLuaLuaAst.LuaIdentifierNameSyntax.Init
          AddInitFunction(this, body, initIdentifier, GetInitFunction(this), false)
          for _, ctor in System.each(this._constructors) do
            if not ctor.IsInvokeThisCtor then
              local invocationInit = CSharpLuaLuaAst.LuaInvocationExpressionSyntax:new(2, initIdentifier, CSharpLuaLuaAst.LuaIdentifierNameSyntax.This)
              ctor.Body.Statements:Insert(0, CSharpLuaLuaAst.LuaExpressionStatementSyntax(invocationInit))
            end
          end
        end

        if #this._constructors == 1 then
          AddInitFunction(this, body, CSharpLuaLuaAst.LuaIdentifierNameSyntax.Ctor, CSharpLua.Utility.First(this._constructors, CSharpLuaLuaAst.LuaConstructorAdapterExpressionSyntax), true)
        else
          local ctrosTable = CSharpLuaLuaAst.LuaTableInitializerExpression()
          local index = 1
          for _, ctor in System.each(this._constructors) do
            local name = CSharpLuaLuaAst.LuaSyntaxNode.SpecailWord("ctor" --[[Tokens.Ctor]] .. index)
            local nameIdentifier = CSharpLuaLuaAst.LuaIdentifierNameSyntax:new(1, name)
            AddInitFunction(this, body, nameIdentifier, ctor, false)
            ctrosTable.Items:Add(CSharpLuaLuaAst.LuaSingleTableItemSyntax(nameIdentifier))
            index = index + 1
          end
          AddResultTable1(this, CSharpLuaLuaAst.LuaIdentifierNameSyntax.Ctor, ctrosTable)
        end
      else
        if hasInit then
          AddInitFunction(this, body, CSharpLuaLuaAst.LuaIdentifierNameSyntax.Ctor, GetInitFunction(this), true)
        end
      end
    end
    CheckAttributes = function (this) 
      if #this._attributes.Items > 0 then
        local functionExpression = CSharpLuaLuaAst.LuaFunctionExpressionSyntax()
        functionExpression:AddParameter1(CSharpLuaLuaAst.LuaIdentifierNameSyntax.Global)
        functionExpression:AddStatement(CSharpLuaLuaAst.LuaReturnStatementSyntax(this._attributes))
        AddResultTable1(this, CSharpLuaLuaAst.LuaIdentifierNameSyntax.Attributes, functionExpression)
      end
    end
    AddAllStatementsTo = function (this, body) 
      body.Statements:Add(this._local)
      CheckStaticCtorFunction(this, body)
      CheckCtorsFunction(this, body)
      body.Statements:Add(this._methodList)
      CheckAttributes(this)
      local returnStatement = CSharpLuaLuaAst.LuaReturnStatementSyntax(this._resultTable)
      body.Statements:Add(returnStatement)
    end
    Render = function (this, renderer) 
      if this.IsPartialMark then
        return
      end

      for _, comment in System.each(this._documentComments) do
        comment:Render(renderer)
      end

      if #this._typeParameters > 0 then
        local wrapFunction = CSharpLuaLuaAst.LuaFunctionExpressionSyntax()
        for _, type in System.each(this._typeParameters) do
          wrapFunction:AddParameter(type)
        end
        AddAllStatementsTo(this, wrapFunction.Body)
        this:getBody().Statements:Add(CSharpLuaLuaAst.LuaReturnStatementSyntax(wrapFunction))
      else
        AddAllStatementsTo(this, this:getBody())
      end
      CSharpLuaLuaAst.LuaWrapFunctionStatementSynatx.Render(this, renderer)
    end
    return {
      __inherits__ = function (global) 
        return {
          global.CSharpLua.LuaAst.LuaWrapFunctionStatementSynatx
        }
      end, 
      IsPartialMark = false, 
      AddStaticReadOnlyAssignmentName = AddStaticReadOnlyAssignmentName, 
      AddDocumentComments = AddDocumentComments, 
      AddClassAttributes = AddClassAttributes, 
      AddMethodAttributes = AddMethodAttributes, 
      AddFieldAttributes = AddFieldAttributes, 
      AddTypeParameters = AddTypeParameters, 
      AddBaseTypes = AddBaseTypes, 
      AddMethod = AddMethod, 
      AddField = AddField, 
      AddProperty = AddProperty, 
      AddEvent = AddEvent, 
      SetStaticCtor = SetStaticCtor, 
      SetStaticCtorEmpty = SetStaticCtorEmpty, 
      getIsNoneCtros = getIsNoneCtros, 
      getIsInitStatementExists = getIsInitStatementExists, 
      AddCtor = AddCtor, 
      Render = Render, 
      __ctor__ = __ctor__
    }
  end)

  namespace.class("LuaClassDeclarationSyntax", function (namespace) 
    local __ctor__
    __ctor__ = function (this, name) 
      this.__base__.__ctor__(this)
      this:UpdateIdentifiers(name, CSharpLuaLuaAst.LuaIdentifierNameSyntax.Namespace, CSharpLuaLuaAst.LuaIdentifierNameSyntax.Class, CSharpLuaLuaAst.LuaIdentifierNameSyntax.Namespace)
    end
    return {
      __inherits__ = function (global) 
        return {
          global.CSharpLua.LuaAst.LuaTypeDeclarationSyntax
        }
      end, 
      __ctor__ = __ctor__
    }
  end)

  namespace.class("LuaStructDeclarationSyntax", function (namespace) 
    local __ctor__
    __ctor__ = function (this, name) 
      this.__base__.__ctor__(this)
      this:UpdateIdentifiers(name, CSharpLuaLuaAst.LuaIdentifierNameSyntax.Namespace, CSharpLuaLuaAst.LuaIdentifierNameSyntax.Struct, CSharpLuaLuaAst.LuaIdentifierNameSyntax.Namespace)
    end
    return {
      __inherits__ = function (global) 
        return {
          global.CSharpLua.LuaAst.LuaTypeDeclarationSyntax
        }
      end, 
      __ctor__ = __ctor__
    }
  end)

  namespace.class("LuaInterfaceDeclarationSyntax", function (namespace) 
    local __ctor__
    __ctor__ = function (this, name) 
      this.__base__.__ctor__(this)
      this:UpdateIdentifiers(name, CSharpLuaLuaAst.LuaIdentifierNameSyntax.Namespace, CSharpLuaLuaAst.LuaIdentifierNameSyntax.Interface)
    end
    return {
      __inherits__ = function (global) 
        return {
          global.CSharpLua.LuaAst.LuaTypeDeclarationSyntax
        }
      end, 
      __ctor__ = __ctor__
    }
  end)

  namespace.class("LuaEnumDeclarationSyntax", function (namespace) 
    local Add, Render, __ctor__
    __ctor__ = function (this, fullName, name, compilationUnit) 
      this.__base__.__ctor__(this)
      this.FullName = fullName
      this.CompilationUnit = compilationUnit
      this:UpdateIdentifiers(name, CSharpLuaLuaAst.LuaIdentifierNameSyntax.Namespace, CSharpLuaLuaAst.LuaIdentifierNameSyntax.Enum)
    end
    Add = function (this, statement) 
      this._resultTable.Items:Add(statement)
    end
    Render = function (this, renderer) 
      if this.IsExport then
        this.__base__.Render(this, renderer)
      end
    end
    return {
      __inherits__ = function (global) 
        return {
          global.CSharpLua.LuaAst.LuaTypeDeclarationSyntax
        }
      end, 
      IsExport = false, 
      Add = Add, 
      Render = Render, 
      __ctor__ = __ctor__
    }
  end)
end)
